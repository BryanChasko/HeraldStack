"""
This type stub file was generated by pyright.
"""

import numpy as np
import logging
import sys
import inspect
from .loader import *
from faiss import class_wrappers
from faiss.gpu_wrappers import *
from faiss.array_conversions import *
from faiss.extra_wrappers import Kmeans, MapInt64ToInt64, ResultHeap, bucket_sort, checksum, eval_intersection, kmax, kmin, knn, knn_hamming, lrand, matrix_bucket_sort_inplace, merge_knn_results, normalize_L2, pack_bitstrings, pairwise_distances, rand, rand_smooth_vectors, randint, randn, unpack_bitstrings

__version__ = ...
logger = ...
shard_ivf_index_centroids = ...
this_module = ...
def add_ref_in_constructor(the_class, parameter_no): # -> None:
    ...

def add_to_referenced_objects(self, ref): # -> None:
    ...

def add_ref_in_method(the_class, method_name, parameter_no): # -> None:
    ...

def add_ref_in_method_explicit_own(the_class, method_name): # -> None:
    ...

def add_ref_in_function(function_name, parameter_no): # -> None:
    ...

search_with_parameters_c = ...
def search_with_parameters(index, x, k, params=..., output_stats=...): # -> tuple[_Array[tuple[int, int], floating[_32Bit]], _Array[tuple[int, int], signedinteger[_64Bit]]] | tuple[_Array[tuple[int, int], floating[_32Bit]], _Array[tuple[int, int], signedinteger[_64Bit]], dict[str, Any]]:
    ...

range_search_with_parameters_c = ...
def range_search_with_parameters(index, x, radius, params=..., output_stats=...): # -> tuple[Any, Any, Any] | tuple[Any, Any, Any, dict[str, Any]]:
    ...

IndexProxy = IndexReplicas
ConcatenatedInvertedLists = HStackInvertedLists
IndexResidual = IndexResidualQuantizer
IVFSearchParameters = SearchParametersIVF
def serialize_index(index, io_flags=...): # -> _Array1D[float64] | ndarray[tuple[int], dtype[Any]]:
    """ convert an index to a numpy uint8 array  """
    ...

def deserialize_index(data, io_flags=...):
    ...

def serialize_index_binary(index): # -> _Array1D[float64] | ndarray[tuple[int], dtype[Any]]:
    """ convert an index to a numpy uint8 array  """
    ...

def deserialize_index_binary(data):
    ...

class TimeoutGuard:
    def __init__(self, timeout_in_seconds: float) -> None:
        ...
    
    def __enter__(self): # -> None:
        ...
    
    def __exit__(self, exc_type, exc_value, traceback): # -> None:
        ...
    


